// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tabloid.Data;

#nullable disable

namespace Tabloid.Migrations
{
    [DbContext(typeof(TabloidDbContext))]
    partial class TabloidDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d833387-df10-4115-9d17-47349e16f197",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAl6msYCAP7F0GEQ2hcXqcB1jaZTwc7fgiDsmQ4+IKCc6tKpyd0jj5skw1FBfNL6YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "031a42d7-397e-4455-87b1-8595a1def786",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82be11ad-bde7-4d49-9ee1-6d4ed1bfc1cf",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBHzpBIky5ei39OvY8VXSEalzmcIvLdkGvJoj5aRjNUqpi3EAWXTJvyQ75CGXcFO5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ef43d6f-0262-4020-87bf-696b196405de",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75b56190-23fc-43ce-9b5c-072c83b495c9",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHoadN2/3YmYalsJiFgj+xth9U1tAcb8DaoY2tPZlmI4jr9xkew2owLeywLNysRHLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9882860-5c58-4263-aad8-106f70159157",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aac8ce6e-3694-435a-a996-20e6d304e3aa",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELJHOPbmpO2mqI/6V5jwG6LHuOkZu1sUKutbvWY0fOaeYG7k8ZEvZWrEotWTaNa7MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7218b49e-e4c9-4998-abc1-635f811aa911",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84a42742-c1a9-49a4-9f27-5ac3c5e9bbe8",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBZCId8CY+sb+4dfRe3WW9Gog9gTx4NMlr242YHCgtWQbKpA9Hw6fLJl4jwgGqB9Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "099c6d60-b326-44ff-a875-2f7041118701",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ca8bf11-89cc-49dc-a18d-1ee80ed95e16",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBzfFnApmDyOOlr/Zv6AW7ob8RxBlHWVIdEcj3jiQYYs2GcKeczW+tZL3ESItOVVCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3446ea9-cc8b-42d6-849c-eea44c72bd2a",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostReaction", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.Property<int>("ReactionsId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "ReactionsId");

                    b.HasIndex("ReactionsId");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("Tabloid.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Art"
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Comment 1",
                            PostId = 1,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Comment 2",
                            PostId = 2,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Comment 3",
                            PostId = 3,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "Comment 4",
                            PostId = 4,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Comment 5",
                            PostId = 5,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 6,
                            Content = "Comment 6",
                            PostId = 6,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 7,
                            Content = "Comment 7",
                            PostId = 7,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 8,
                            Content = "Comment 8",
                            PostId = 8,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 9,
                            Content = "Comment 9",
                            PostId = 9,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 10,
                            Content = "Comment 10",
                            PostId = 10,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 11,
                            Content = "Comment 11",
                            PostId = 11,
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 12,
                            Content = "Comment 12",
                            PostId = 12,
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 13,
                            Content = "Comment 13",
                            PostId = 13,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 14,
                            Content = "Comment 14",
                            PostId = 14,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 15,
                            Content = "Comment 15",
                            PostId = 15,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 16,
                            Content = "Comment 16",
                            PostId = 1,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 17,
                            Content = "Comment 17",
                            PostId = 2,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 18,
                            Content = "Comment 18",
                            PostId = 3,
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 19,
                            Content = "Comment 19",
                            PostId = 4,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 20,
                            Content = "Comment 20",
                            PostId = 5,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeaderImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Content 1",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 26, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9517),
                            Title = "Post 1",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Content 2",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/cache/funny-dog-looking-out-the-car-window-web-header.jpg-nggid044570-ngg0dyn-1280x375x100-00f0w010c010r110f110r010t010.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 27, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9606),
                            Title = "Post 2",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Content = "Content 3",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 24, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9610),
                            Title = "Post 3",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Content = "Content 4",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 27, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9613),
                            Title = "Post 4",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Content = "Content 5",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 26, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9615),
                            Title = "Post 5",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Content = "Content 6",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 26, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9622),
                            Title = "Post 6",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Content = "Content 7",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 25, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9628),
                            Title = "Post 7",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Content = "Content 8",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/cache/funny-dog-looking-out-the-car-window-web-header.jpg-nggid044570-ngg0dyn-1280x375x100-00f0w010c010r110f110r010t010.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 27, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9630),
                            Title = "Post 8",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Content = "Content 9",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 23, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9633),
                            Title = "Post 9",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            Content = "Content 10",
                            IsApproved = false,
                            PublicationDate = new DateTime(2024, 5, 26, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9635),
                            Title = "Post 10",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Content = "Content 11",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 25, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9644),
                            Title = "Post 11",
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Content = "Content 12",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9651),
                            Title = "Post 12",
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Content = "Content 13",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/funny-kittens-and-cold-day-website-header.jpg",
                            IsApproved = false,
                            PublicationDate = new DateTime(2024, 5, 28, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9653),
                            Title = "Post 13",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Content = "Content 14",
                            HeaderImageURL = "https://www.freewebheaders.com/wp-content/gallery/funny/cache/funny-dog-looking-out-the-car-window-web-header.jpg-nggid044570-ngg0dyn-1280x375x100-00f0w010c010r110f110r010t010.jpg",
                            IsApproved = false,
                            PublicationDate = new DateTime(2024, 5, 28, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9655),
                            Title = "Post 14",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Content = "Content 15",
                            IsApproved = false,
                            PublicationDate = new DateTime(2024, 5, 28, 16, 48, 19, 490, DateTimeKind.Local).AddTicks(9658),
                            Title = "Post 15",
                            UserProfileId = 3
                        });
                });

            modelBuilder.Entity("Tabloid.Models.PostReaction", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("ReactionId")
                        .HasColumnType("integer");

                    b.HasKey("UserProfileId", "PostId", "ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactionId");

                    b.ToTable("PostReactions");

                    b.HasData(
                        new
                        {
                            UserProfileId = 1,
                            PostId = 1,
                            ReactionId = 1
                        },
                        new
                        {
                            UserProfileId = 2,
                            PostId = 2,
                            ReactionId = 2
                        },
                        new
                        {
                            UserProfileId = 3,
                            PostId = 3,
                            ReactionId = 3
                        },
                        new
                        {
                            UserProfileId = 4,
                            PostId = 4,
                            ReactionId = 4
                        },
                        new
                        {
                            UserProfileId = 5,
                            PostId = 5,
                            ReactionId = 5
                        },
                        new
                        {
                            UserProfileId = 6,
                            PostId = 6,
                            ReactionId = 1
                        },
                        new
                        {
                            UserProfileId = 1,
                            PostId = 7,
                            ReactionId = 2
                        },
                        new
                        {
                            UserProfileId = 2,
                            PostId = 8,
                            ReactionId = 3
                        },
                        new
                        {
                            UserProfileId = 3,
                            PostId = 9,
                            ReactionId = 4
                        },
                        new
                        {
                            UserProfileId = 4,
                            PostId = 10,
                            ReactionId = 5
                        },
                        new
                        {
                            UserProfileId = 5,
                            PostId = 11,
                            ReactionId = 1
                        },
                        new
                        {
                            UserProfileId = 6,
                            PostId = 12,
                            ReactionId = 2
                        });
                });

            modelBuilder.Entity("Tabloid.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 2
                        },
                        new
                        {
                            PostId = 3,
                            TagId = 3
                        },
                        new
                        {
                            PostId = 4,
                            TagId = 4
                        },
                        new
                        {
                            PostId = 5,
                            TagId = 5
                        },
                        new
                        {
                            PostId = 6,
                            TagId = 6
                        },
                        new
                        {
                            PostId = 7,
                            TagId = 1
                        },
                        new
                        {
                            PostId = 8,
                            TagId = 2
                        },
                        new
                        {
                            PostId = 9,
                            TagId = 3
                        },
                        new
                        {
                            PostId = 10,
                            TagId = 4
                        },
                        new
                        {
                            PostId = 11,
                            TagId = 5
                        },
                        new
                        {
                            PostId = 12,
                            TagId = 6
                        },
                        new
                        {
                            PostId = 13,
                            TagId = 1
                        },
                        new
                        {
                            PostId = 14,
                            TagId = 2
                        },
                        new
                        {
                            PostId = 15,
                            TagId = 3
                        },
                        new
                        {
                            PostId = 1,
                            TagId = 4
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 5
                        },
                        new
                        {
                            PostId = 3,
                            TagId = 6
                        },
                        new
                        {
                            PostId = 4,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReactionImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Like",
                            ReactionImage = "👍"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Love",
                            ReactionImage = "❤️"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wow",
                            ReactionImage = "😮"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sad",
                            ReactionImage = "😭"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Angry",
                            ReactionImage = "😠"
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Subscription", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.HasKey("FollowerId", "CreatorId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            FollowerId = 2,
                            CreatorId = 1
                        },
                        new
                        {
                            FollowerId = 3,
                            CreatorId = 1
                        },
                        new
                        {
                            FollowerId = 4,
                            CreatorId = 1
                        },
                        new
                        {
                            FollowerId = 5,
                            CreatorId = 1
                        },
                        new
                        {
                            FollowerId = 6,
                            CreatorId = 1
                        },
                        new
                        {
                            FollowerId = 1,
                            CreatorId = 2
                        },
                        new
                        {
                            FollowerId = 3,
                            CreatorId = 2
                        },
                        new
                        {
                            FollowerId = 4,
                            CreatorId = 2
                        },
                        new
                        {
                            FollowerId = 5,
                            CreatorId = 2
                        },
                        new
                        {
                            FollowerId = 6,
                            CreatorId = 2
                        },
                        new
                        {
                            FollowerId = 1,
                            CreatorId = 3
                        },
                        new
                        {
                            FollowerId = 2,
                            CreatorId = 3
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "News"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Opinion"
                        },
                        new
                        {
                            Id = 3,
                            Name = "How To"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Discussion"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Challenge"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Press Release"
                        });
                });

            modelBuilder.Entity("Tabloid.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            IsActive = true,
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("UserProfileUserProfile", b =>
                {
                    b.Property<int>("SubscribersId")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("integer");

                    b.HasKey("SubscribersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("UserProfileUserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostReaction", b =>
                {
                    b.HasOne("Tabloid.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.Reaction", null)
                        .WithMany()
                        .HasForeignKey("ReactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("Tabloid.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tabloid.Models.Comment", b =>
                {
                    b.HasOne("Tabloid.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany("Comments")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.HasOne("Tabloid.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany("Posts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.PostReaction", b =>
                {
                    b.HasOne("Tabloid.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Reaction");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.PostTag", b =>
                {
                    b.HasOne("Tabloid.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Tabloid.Models.Reaction", b =>
                {
                    b.HasOne("Tabloid.Models.UserProfile", null)
                        .WithMany("Reactions")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Tabloid.Models.Subscription", b =>
                {
                    b.HasOne("Tabloid.Models.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Tabloid.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("UserProfileUserProfile", b =>
                {
                    b.HasOne("Tabloid.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tabloid.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Tabloid.Models.UserProfile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
